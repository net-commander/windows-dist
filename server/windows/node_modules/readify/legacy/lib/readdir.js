'use strict';

var path = require('path');
var fs = require('fs');

var exec = require('execon');
var promisify = require('es6-promisify');
var currify = require('currify/legacy');
var zames = require('zames/legacy');

var getStat = currify(_getStat);
var getAllStats = zames(_getAllStats);

var readdir = promisify(fs.readdir, fs);
var good = function good(f) {
    return function () {
        for (var _len = arguments.length, a = Array(_len), _key = 0; _key < _len; _key++) {
            a[_key] = arguments[_key];
        }

        return f.apply(undefined, [null].concat(a));
    };
};

module.exports = function (path, fn) {
    readdir(path).then(getAllStats(path)).then(parseAllStats).then(good(fn)).catch(fn);
};

function _getAllStats(dir, names, callback) {
    var length = names.length;

    if (!length) return callback(null, []);

    var funcs = names.map(function (name) {
        return getStat(name, path.join(dir, name));
    });

    exec.parallel(funcs, function () {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        callback(null, args.slice(1));
    });
}

function emptyStat() {
    return {
        mode: 0,
        size: 0,
        mtime: 0,
        uid: 0,
        isDirectory: function isDirectory() {}
    };
}

function _getStat(name, path, callback) {
    fs.stat(path, function (error) {
        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : emptyStat();

        data.name = name;

        callback(null, data);
    });
}

function parseAllStats(array) {
    var parse = function parse(item) {
        return parseStat(item);
    };

    return array.map(parse);
}

function parseStat(stat) {
    var isDir = stat.isDirectory();
    var size = isDir ? 'dir' : stat.size;

    return {
        name: stat.name,
        size: size,
        date: stat.mtime,
        owner: stat.uid,
        mode: stat.mode
    };
}