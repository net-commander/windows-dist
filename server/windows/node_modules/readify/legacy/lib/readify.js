'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var format = require('format-io');
var shortdate = require('shortdate');
var promisify = require('es6-promisify');
var currify = require('currify/legacy');
var zames = require('zames/legacy');

var WIN = process.platform === 'win32';

var parseAllStats = currify(_parseAllStats);
var replaceProperty = currify(_replaceProperty);
var fillJSON = zames(_fillJSON);

var nicki = !WIN && require('nicki/legacy');

var readdir = promisify(require('./readdir'));
var good = function good(f) {
    return function () {
        for (var _len = arguments.length, a = Array(_len), _key = 0; _key < _len; _key++) {
            a[_key] = arguments[_key];
        }

        return f.apply(undefined, [null].concat(a));
    };
};

module.exports = readify;

function readify(path, options, fn) {
    if (!fn) {
        fn = options;
        options = {};
    }

    var type = options.type;

    check(path, type, fn);

    readdir(path).then(parseAllStats(type)).then(fillJSON(path, type)).then(good(fn)).catch(fn);
}

function check(path, type, callback) {
    var isString = function isString(a) {
        return typeof a === 'string';
    };
    var isUndefined = function isUndefined(a) {
        return typeof a === 'undefined';
    };

    var pathMsg = 'path should be string!';
    var typeMsg = 'type should be a string or not to be defined!';
    var callbackMsg = 'callback should be function!';

    if (!isString(path)) throw Error(pathMsg);

    if (type && !isString(type)) throw Error(typeMsg);

    if (typeof callback !== 'function') throw Error(callbackMsg);
}

function replaceDate(stat) {
    var date = !stat.date ? '' : shortdate(stat.date, {
        order: 'little'
    });

    return Object.assign(stat, {
        date: date
    });
}

function replaceMode(stat) {
    var octal = Number(stat.mode).toString(8);
    var mode = format.permissions.symbolic(octal);

    return Object.assign(stat, {
        mode: mode
    });
}

function replaceSize(stat) {
    var size = format.size(stat.size);

    return Object.assign(stat, {
        size: size
    });
}

function _parseAllStats(type, files) {
    if (type === 'raw') return files;

    return files.map(replaceDate).map(replaceSize).map(replaceMode);
}

function _fillJSON(dir, type, files, callback) {
    var path = format.addSlashToEnd(dir);

    if (type === 'raw') return callback(null, { path: path, files: files });

    changeUIDToName(files, function (error, newFiles) {
        var json = {
            path: path,
            files: newFiles || files
        };

        callback(null, json);
    });
}

function changeUIDToName(files, callback) {
    if (!nicki) return callback(null, files);

    nicki(function (error, names) {
        if (error) return callback(error);

        var replaceOwner = replaceProperty(names, 'owner');

        callback(null, files.map(replaceOwner));
    });
}

function _replaceProperty(obj, prop, item) {
    var n = item[prop];
    var data = obj[n];

    if (typeof data === 'undefined') return item;

    return Object.assign(item, _defineProperty({}, prop, data));
}