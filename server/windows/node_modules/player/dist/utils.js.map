{"version":3,"sources":["../libs/utils.js"],"names":[],"mappings":";;;;;QAAgB,SAAS,GAAT,SAAS;QAYT,MAAM,GAAN,MAAM;QAoCN,YAAY,GAAZ,YAAY;QAUZ,WAAW,GAAX,WAAW;QAgBX,SAAS,GAAT,SAAS;;;;AA1ElB,SAAS,SAAS,CAAC,GAAG,EAAE;AAC7B,MAAI,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;;;AAGnD,MAAI,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;AAChC,QAAI,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;AAC/B,YAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;GACpB;;AAED,SAAO,QAAQ,CAAA;CAChB;;AAEM,SAAS,MAAM,CAAC,IAAI,EAAE,MAAM,EAAE;AACnC,MAAI,KAAK,GAAG,EAAE,CAAA;;AAEd,MAAI,OAAO,IAAI,AAAC,KAAK,QAAQ,EAAE;;;AAC7B,SAAK,CAAC,IAAI,iDACN,MAAM,EAAI,IAAI,gCAChB,KAAK,EAAE,CAAC,gCACR,OAAO,EAAE,SAAS,CAAC,IAAI,CAAC,gBACxB,CAAA;;AAEF,WAAO,KAAK,CAAA;GACb;;AAED,MAAI,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,KAAK,EAAK;;;;AAE5B,QAAI,OAAO,IAAI,AAAC,KAAK,QAAQ,EAAE;AAC7B,UAAI,CAAC,GAAG,GAAG,KAAK,CAAA;;AAEhB,UAAI,IAAI,CAAC,MAAM,CAAC,EACd,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAA;;AAEtC,WAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;AAChB,aAAM;KACP;;;AAGD,SAAK,CAAC,IAAI,mDACN,MAAM,EAAI,IAAI,iCAChB,KAAK,EAAE,KAAK,iCACZ,OAAO,EAAE,SAAS,CAAC,IAAI,CAAC,iBACxB,CAAA;GACH,CAAC,CAAA;;AAEF,SAAO,KAAK,CAAA;CACb;;AAEM,SAAS,YAAY,CAAC,GAAG,EAAE;AAChC,MAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EACrB,OAAO,CAAC,CAAA;;AAEV,MAAI,GAAG,GAAG,CAAC,CAAA;AACX,MAAI,GAAG,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,CAAA;;AAExB,SAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC,CAAA,AAAC,CAAC,GAAG,GAAG,CAAA;CACzD;;AAEM,SAAS,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE;AACtC,MAAI,GAAG,GAAG,EAAE,CAAA;AACZ,KAAG,IAAK,eAAe,GAAG,IAAI,AAAC,CAAA;AAC/B,KAAG,IAAI,KAAK,CAAA;;AAEZ,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EACxB,GAAG,IAAI,GAAG,CAAA;;AAEZ,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAC5B,GAAG,IAAI,GAAG,CAAA;;AAEZ,KAAG,IAAI,GAAG,CAAA;;AAEV,SAAO,GAAG,CAAA;CACX;;AAEM,SAAS,SAAS,CAAC,GAAG,EAAE;AAC7B,SAAO,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAA;CAC5B","file":"libs/utils.js","sourcesContent":["export function fetchName(str) {\n  var filename = str.substr(str.lastIndexOf('/') + 1)\n\n  // Escape URI like this: `http://domain.com/xxx.mp3?xcode=fasda`\n  if (filename.indexOf('?') !== -1) {\n    var parts = filename.split('?')\n    filename = parts[0]\n  }\n\n  return filename\n}\n\nexport function format(list, srcKey) {\n  var songs = []\n\n  if (typeof(list) === 'string') {\n    songs.push({\n      [ srcKey ]: list,\n      '_id': 0,\n      '_name': splitName(list),\n    })\n\n    return songs\n  }\n\n  list.forEach((item, index) => {\n    // If `songs` is a Map\n    if (typeof(item) === 'object') {\n      item._id = index\n\n      if (item[srcKey])\n        item._name = splitName(item[srcKey])\n\n      songs.push(item)\n      return\n    }\n\n    // If `songs` is a Array\n    songs.push({\n      [ srcKey ]: item,\n      '_id': index,\n      '_name': splitName(item)\n    })\n  })\n\n  return songs\n}\n\nexport function chooseRandom(arr) {\n  if (!arr || !arr.length)\n    return 0\n\n  let min = 0\n  let max = arr.length - 1\n\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport function getProgress(p, t, info) {\n  var bar = ''\n  bar += ('Now playing: ' + info)\n  bar += '\\n['\n\n  for (var i = 0; i < p; i++)\n    bar += '>'\n\n  for (var i = p; i < t - 1; i++)\n    bar += ' '\n\n  bar += ']'\n\n  return bar\n}\n\nexport function splitName(str) {\n  return str.split('/').pop()\n}\n"]}