'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var tail = function tail(list) {
    return [].slice.call(list, 1);
};
var f = function f(fn) {
    return [function (a) {
        return fn.apply(undefined, arguments);
    }, function (a, b) {
        return fn.apply(undefined, arguments);
    }, function (a, b, c) {
        return fn.apply(undefined, arguments);
    }, function (a, b, c, d) {
        return fn.apply(undefined, arguments);
    }, function (a, b, c, d, e) {
        return fn.apply(undefined, arguments);
    }];
};

module.exports = function currify(fn) {
    check(fn);

    var args = tail(arguments);

    if (args.length >= fn.length) return fn.apply(undefined, _toConsumableArray(args));

    var again = function again() {
        return currify.apply(undefined, [fn].concat(_toConsumableArray(args), Array.prototype.slice.call(arguments)));
    };

    var count = fn.length - arguments.length;
    var func = f(again)[count];

    return func || again;
};

function check(fn) {
    if (typeof fn !== 'function') throw Error('fn should be function!');
}