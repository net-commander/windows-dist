// Generated by CoffeeScript 1.3.3
var EventEmitter, WebSocket, WebSocketTransport,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

WebSocket = require('ws');

EventEmitter = require('events').EventEmitter;

WebSocketTransport = (function(_super) {

  __extends(WebSocketTransport, _super);

  WebSocketTransport.CONNECTING = 0;

  WebSocketTransport.OPEN = 1;

  WebSocketTransport.CLOSING = 2;

  WebSocketTransport.CLOSED = 3;

  function WebSocketTransport(url) {
    this.onData = __bind(this.onData, this);

    var _this = this;
    this.ws = new WebSocket(url);
    this.ws.on('message', this.onData);
    this.ws.on('close', function() {
      return _this.emit('close');
    });
    this.ws.on('open', function() {});
    this.readyState = WebSocketTransport.CONNECTING;
  }

  WebSocketTransport.prototype.send = function(m) {
    return this.ws.send(JSON.stringify(m));
  };

  WebSocketTransport.prototype.close = function() {
    return this.ws.close();
  };

  WebSocketTransport.prototype.onData = function(data) {
    var i, payload, that, type, _results;
    that = this;
    type = data.slice(0, 1);
    switch (type) {
      case "o":
        return that._dispatchOpen();
      case "a":
        payload = JSON.parse(data.slice(1) || "[]");
        i = 0;
        _results = [];
        while (i < payload.length) {
          that._dispatchMessage(payload[i]);
          _results.push(i++);
        }
        return _results;
        break;
      case "m":
        payload = JSON.parse(data.slice(1) || "null");
        return that._dispatchMessage(payload);
      case "c":
        payload = JSON.parse(data.slice(1) || "[]");
        return that._didClose(payload[0], payload[1]);
      case "h":
        return that._dispatchHeartbeat();
    }
  };

  WebSocketTransport.prototype._dispatchOpen = function() {
    var that;
    that = this;
    if (that.readyState === WebSocketTransport.CONNECTING) {
      that.readyState = WebSocketTransport.OPEN;
      return this.emit('connection');
    } else {
      return that._didClose(1006, "Server lost session");
    }
  };

  WebSocketTransport.prototype._dispatchMessage = function(data) {
    var that;
    that = this;
    if (that.readyState !== WebSocketTransport.OPEN) {
      return;
    }
    return this.emit("data", data);
  };

  WebSocketTransport.prototype._dispatchHeartbeat = function(data) {
    var that;
    that = this;
    if (that.readyState !== WebSocketTransport.OPEN) {
      return;
    }
    return this.emit("heartbeat");
  };

  WebSocketTransport.prototype._didClose = function(code, reason, force) {
    var that;
    that = this;
    if (that.readyState !== WebSocketTransport.CONNECTING && that.readyState !== WebSocketTransport.OPEN && that.readyState !== WebSocketTransport.CLOSING) {
      throw new Error("INVALID_STATE_ERR");
    }
    if (that._transport) {
      that._transport.close();
      that._transport = null;
    }
    that.readyState = WebSocketTransport.CLOSED;
    return this.emit("close");
  };

  return WebSocketTransport;

})(EventEmitter);

module.exports = WebSocketTransport;
