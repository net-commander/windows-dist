"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const has_1 = require("./support/has");
const Symbol_1 = require("./Symbol");
var Shim;
(function (Shim) {
    function is(value1, value2) {
        if (value1 === value2) {
            return value1 !== 0 || 1 / value1 === 1 / value2; // -0
        }
        return value1 !== value1 && value2 !== value2; // NaN
    }
    Shim.is = is;
    function getOwnPropertySymbols(o) {
        return Object.getOwnPropertyNames(o).filter((key) => Boolean(key.match(/^@@.+/)))
            .map((key) => Symbol.for(key.substring(2)));
    }
    Shim.getOwnPropertySymbols = getOwnPropertySymbols;
    function getOwnPropertyNames(o) {
        return Object.getOwnPropertyNames(o).filter((key) => !Boolean(key.match(/^@@.+/)));
    }
    Shim.getOwnPropertyNames = getOwnPropertyNames;
    function symbolAwareKeys(o) {
        return Object.keys(o).filter((key) => !Boolean(key.match(/^@@.+/)));
    }
    Shim.symbolAwareKeys = symbolAwareKeys;
    function getOwnPropertyDescriptor(o, prop) {
        if (Symbol_1.isSymbol(prop)) {
            return Object.getOwnPropertyDescriptor(o, prop);
        }
        else {
            return Object.getOwnPropertyDescriptor(o, prop);
        }
    }
    Shim.getOwnPropertyDescriptor = getOwnPropertyDescriptor;
    function values(o) {
        return exports.keys(o).map(key => o[key]);
    }
    Shim.values = values;
    function entries(o) {
        return exports.keys(o).map(key => [key, o[key]]);
    }
    Shim.entries = entries;
})(Shim || (Shim = {}));
/**
 * Determines whether two values are the same value.
 *
 * @param value1 The first value to compare
 * @param value2 The second value to compare
 * @return true if the values are the same; false otherwise
 */
exports.is = 'is' in Object
    ? Object.is
    : Shim.is;
/**
 * Detect if there is native support for Symbol properties in Object
 */
const hasGetOwnPropertySymbols = has_1.default('es6-symbol') && 'getOwnPropertySymbols' in Object;
/**
 * Returns an array of own properties who key is a symbol
 *
 * @param o The object to return the properties for
 */
exports.getOwnPropertySymbols = hasGetOwnPropertySymbols
    ? Object.getOwnPropertySymbols
    : Shim.getOwnPropertySymbols;
/**
 * Returns an array of own properties who key is a string
 *
 * @param o The object to return the properties for
 */
/* intentionally detecting `getOwnPropertySymbols` because we should should provide the shim
 * when there is no support for symbols */
exports.getOwnPropertyNames = hasGetOwnPropertySymbols
    ? Object.getOwnPropertyNames
    : Shim.getOwnPropertyNames;
/**
 * Returns the names of the enumerable properties and methods of an object.
 * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.
 */
/* intentionally detecting `getOwnPropertySymbols` because we should should provide the shim
 * when there is no support for symbols */
exports.keys = hasGetOwnPropertySymbols
    ? Object.keys
    : Shim.symbolAwareKeys;
/**
 * Returns the values of the enumerable properties and methods of an object.
 * @param o Object that contains the properties and methods.
 */
exports.values = 'values' in Object
    ? Object.values
    : Shim.values;
/**
 * Returns the keys and values of the enumerable properties and methods of an object. Each entry will be returned as an
 * array holding the [key, value].
 * @param o Object that contains the properties and methods.
 */
exports.entries = 'entries' in Object
    ? Object.entries
    : Shim.entries;
exports.getOwnPropertyDescriptor = hasGetOwnPropertySymbols
    ? Object.getOwnPropertyDescriptor
    : Shim.getOwnPropertyDescriptor;
function getOwnPropertyDescriptorsWrapper(o) {
    let descriptors = exports.getOwnPropertyNames(o).reduce((descriptors, key) => {
        descriptors[key] = exports.getOwnPropertyDescriptor(o, key);
        return descriptors;
    }, {});
    exports.getOwnPropertySymbols(o).forEach((sym) => {
        descriptors[sym] = exports.getOwnPropertyDescriptor(o, sym);
    });
    return descriptors;
}
/* Return descriptors for enumerable and non enumerable properties on an object */
exports.getOwnPropertyDescriptors = 'getOwnPropertyDescriptors' in Object
    ? Object.getOwnPropertyDescriptors
    : getOwnPropertyDescriptorsWrapper;
//# sourceMappingURL=object.js.map