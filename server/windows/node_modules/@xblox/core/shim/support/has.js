"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const global_1 = require("./global");
const has_1 = require("../../has");
const has_2 = require("../../has");
exports.default = has_1.default;
__export(require("../../has"));
/* ECMAScript 6 and 7 Features */
/*
 * Determine whether or not native Symbol exists. If it doesn't, we don't want to use
 * a few other native implementations like Map, WeakMap, Set.  Consider a polyfill that provides Symbol,
 * Map, etc in the global namespace. If the polyfill's Symbol is not compatible with our Symbol, neither
 * will be anything that uses their iterator symbol, like Map, Set, etc.
 */
/* Symbol */
has_2.add('es6-symbol', typeof global_1.default.Symbol !== 'undefined' && typeof Symbol() === 'symbol');
/* Object */
has_2.add('es6-object-assign', typeof Object.assign === 'function');
/* Array */
has_2.add('es6-array-from', 'from' in global_1.default.Array);
has_2.add('es6-array-of', 'of' in global_1.default.Array);
has_2.add('es6-array-fill', () => {
    if ('fill' in global_1.default.Array.prototype) {
        /* Some versions of Safari do not properly implement this */
        return [1].fill(9, Number.POSITIVE_INFINITY)[0] === 1;
    }
    return false;
});
has_2.add('es6-array-findindex', 'findIndex' in global_1.default.Array.prototype);
has_2.add('es6-array-find', 'find' in global_1.default.Array.prototype);
has_2.add('es6-array-copywithin', 'copyWithin' in global_1.default.Array.prototype);
has_2.add('es7-array-includes', 'includes' in global_1.default.Array.prototype);
/* String */
has_2.add('es6-string-raw', function () {
    function getCallSite(callSite, ...substitutions) {
        return callSite;
    }
    if ('raw' in global_1.default.String) {
        let b = 1;
        let callSite = getCallSite `a\n${b}`;
        callSite.raw = ['a\\n'];
        const supportsTrunc = global_1.default.String.raw(callSite, 42) === 'a:\\n';
        return supportsTrunc;
    }
    return false;
});
has_2.add('es6-string-fromcodepoint', 'fromCodePoint' in global_1.default.String);
has_2.add('es6-string-codepointat', 'codePointAt' in global_1.default.String.prototype);
has_2.add('es6-string-normalize', 'normalize' in global_1.default.String.prototype);
has_2.add('es6-string-repeat', 'repeat' in global_1.default.String.prototype);
has_2.add('es6-string-startswith', 'startsWith' in global_1.default.String.prototype);
has_2.add('es6-string-endswith', 'endsWith' in global_1.default.String.prototype);
has_2.add('es6-string-includes', 'includes' in global_1.default.String.prototype);
has_2.add('es6-string-padstart', 'padStart' in global_1.default.String.prototype);
has_2.add('es6-string-padend', 'padEnd' in global_1.default.String.prototype);
/* Math */
has_2.add('es6-math-acosh', typeof global_1.default.Math.acosh === 'function');
has_2.add('es6-math-clz32', typeof global_1.default.Math.clz32 === 'function');
has_2.add('es6-math-imul', () => {
    if ('imul' in global_1.default.Math) {
        /* Some versions of Safari on ios do not properly implement this */
        return Math.imul(0xffffffff, 5) === -5;
    }
    return false;
});
/* Promise */
has_2.add('es6-promise', typeof global_1.default.Promise !== 'undefined' && has_1.default('es6-symbol'));
/* Observable */
has_2.add('es-observable', typeof global_1.default.Observable !== 'undefined');
/* Set */
has_2.add('es6-set', () => {
    if (typeof global_1.default.Set === 'function') {
        /* IE11 and older versions of Safari are missing critical ES6 Set functionality */
        const set = new global_1.default.Set([1]);
        return set.has(1) && 'keys' in set && typeof set.keys === 'function' && has_1.default('es6-symbol');
    }
    return false;
});
/* Map */
has_2.add('es6-map', function () {
    if (typeof global_1.default.Map === 'function') {
        /*
        IE11 and older versions of Safari are missing critical ES6 Map functionality
        We wrap this in a try/catch because sometimes the Map constructor exists, but does not
        take arguments (iOS 8.4)
         */
        try {
            const map = new global_1.default.Map([[0, 1]]);
            return map.has(0) &&
                typeof map.keys === 'function' && has_1.default('es6-symbol') &&
                typeof map.values === 'function' &&
                typeof map.entries === 'function';
        }
        catch (e) {
            /* istanbul ignore next: not testing on iOS at the moment */
            return false;
        }
    }
    return false;
});
/* WeakMap */
has_2.add('es6-weakmap', function () {
    if (typeof global_1.default.WeakMap !== 'undefined') {
        /* IE11 and older versions of Safari are missing critical ES6 Map functionality */
        const key1 = {};
        const key2 = {};
        const map = new global_1.default.WeakMap([[key1, 1]]);
        Object.freeze(key1);
        return map.get(key1) === 1 && map.set(key2, 2) === map && has_1.default('es6-symbol');
    }
    return false;
});
/* Miscellaneous features */
has_2.add('float32array', 'Float32Array' in global_1.default);
has_2.add('setimmediate', typeof global_1.default.setImmediate !== 'undefined');
has_2.add('postmessage', typeof postMessage === 'function');
has_2.add('microtasks', () => has_1.default('es6-promise') || has_1.default('host-node') || has_1.default('dom-mutationobserver'));
has_2.add('raf', typeof requestAnimationFrame === 'function');
/* DOM Features */
has_2.add('dom-mutationobserver', () => has_1.default('host-browser') && Boolean(global_1.default.MutationObserver || global_1.default.WebKitMutationObserver));
//# sourceMappingURL=has.js.map